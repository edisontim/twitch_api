searchState.loadedDescShard("twitch_api", 1, "<code>stream.online</code> response payload.\nThe broadcaster user ID you want to get stream online …\nThe broadcaster user ID you want to get stream online …\nThe broadcaster’s user id.\nThe broadcaster’s user login.\nThe broadcaster’s user display name.\nCreate a builder for building <code>StreamOnlineV1</code>. On the …\nThe id of the stream.\nThe timestamp at which the stream went online at.\nThe stream type. Valid values are: live, playlist, …\n<code>user.authorization.grant</code>: a user’s authorization has …\n<code>user.authorization.grant</code> response payload.\n<code>user.authorization.revoke</code>: a user has revoked …\n<code>user.authorization.revoke</code> response payload.\n<code>user.update</code>: user updates their account.\n<code>user.update</code> response payload.\nAuthorization from a user has been granted or revoked to a …\nYour application’s client id. The provided client_id …\nThe client_id of the application that was granted user …\nYour application’s client id. The provided client_id …\nThe client_id of the application with revoked user access.\nThe user’s description.\nThe user’s email. Only included if you have the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecified user updates their account.\nThe user id for the user who has granted authorization for …\nThe user id for the user who has revoked authorization for …\nThe user ID for the user you want update notifications for.\nThe user’s user id.\nThe user login for the user who has granted authorization …\nThe user login for the user who has revoked authorization …\nThe user’s user login.\nThe user display name for the user who has granted …\nThe user name for the user who has revoked authorization …\nThe user’s user display name.\n<code>user.authorization.grant</code>: a user’s authorization has …\n<code>user.authorization.grant</code> response payload.\n<code>user.authorization.revoke</code>: a user has revoked …\n<code>user.authorization.revoke</code> response payload.\nYour application’s client id. The provided client_id …\nThe client_id of the application that was granted user …\nYour application’s client id. The provided client_id …\nThe client_id of the application with revoked user access.\nA user’s authorization has been granted to your client …\nA user has revoked authorization for your client id.\nThe user id for the user who has granted authorization for …\nThe user id for the user who has revoked authorization for …\nThe user login for the user who has granted authorization …\nThe user login for the user who has revoked authorization …\nThe user display name for the user who has granted …\nThe user name for the user who has revoked authorization …\n<code>user.authorization.grant</code>: a user’s authorization has …\n<code>user.authorization.grant</code> response payload.\nCreate a builder for building <code>UserAuthorizationGrantV1</code>. On …\nYour application’s client id. The provided client_id …\nThe client_id of the application that was granted user …\nYour application’s client id. The provided client_id …\nThe user id for the user who has granted authorization for …\nThe user login for the user who has granted authorization …\nThe user display name for the user who has granted …\n<code>user.authorization.revoke</code>: a user has revoked …\n<code>user.authorization.revoke</code> response payload.\nCreate a builder for building <code>UserAuthorizationRevokeV1</code>. …\nYour application’s client id. The provided client_id …\nThe client_id of the application with revoked user access.\nYour application’s client id. The provided client_id …\nThe user id for the user who has revoked authorization for …\nThe user login for the user who has revoked authorization …\nThe user name for the user who has revoked authorization …\n<code>user.update</code>: user updates their account.\n<code>user.update</code> response payload.\nCreate a builder for building <code>UserUpdateV1</code>. On the …\nThe user’s description.\nThe user’s email. Only included if you have the …\nThe user ID for the user you want update notifications for.\nThe user ID for the user you want update notifications for.\nThe user’s user id.\nThe user’s user login.\nThe user’s user display name.\nValid colors for announcements\nAn error for an invalid AnnouncementColor\nThe color blue\nRepresents a donation “amount”\nThe color green\nThe color orange\nThe primary color for the broadcaster\nThe color purple\nThe ISO-4217 three-letter currency code that identifies …\nThe number of decimal places used by the currency. For …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe monetary amount.\nBody parameters\nBody parameters\nBody parameters\nErrors that can happen when creating a body\nHttp client error\nError type to combine a http client error with a other …\nErrors for <code>HelixClient::req_get</code> and similar functions.\nCould not create request\nCould not create request\nA cursor is a pointer to the current “page” in the …\nA cursor is a pointer to the current “page” in the …\nCustom error\n{0}\n{0}\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\nAn empty body.\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nfield serializer only supports strings, sequences, …\nClient for Helix or the New Twitch API\nCreate a body. Used for specializing request bodies\nCould not parse DELETE response\nGot error from DELETE response\nCould not parse GET response\nGot error from GET response\nCould not parse PATCH response\nGot error from PATCH response\nCould not parse POST response\nGot error from POST response\nCould not parse PUT response\nGot error from PUT response\nhttp crate returned an error\nRequest failed from reqwests side\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\nErrors that can happen when creating <code>http::Uri</code> for <code>Request</code>\ncould not assemble URI for request\nuri is invalid\ncould not serialize as json\nNo pagination found\nOptional scopes needed by this endpoint\nOther error\nThe path to the endpoint relative to the helix root. eg. …\nA request that can be paginated.\npair serializer only supports strings, integers, floats, …\ncould not serialize request to query\ncould not serialize to query\nA request is a Twitch endpoint, see New Twitch API …\nHelix endpoint DELETEs information\nRequest failed from reqwests side\nHelix endpoint GETs information\nHelix endpoint PATCHs information\nHelix endpoint POSTs information\nHelix endpoint PUTs information\nResponse retrieved from endpoint. Data is the type in …\nResponse type. twitch’s response will  deserialize to …\nScopes needed for this endpoint\nErrors from the query serializer\nserialization of body failed\nserializer only supports structs and maps on top-level\nURI could not be parsed\ncould not assemble URI for request\ncould not parse response as utf8 when calling <code>GET {2}</code>\ncould not parse response as utf8 when calling <code>PUT {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>DELETE {2}</code>\nvalue serializer only supports primitive types\nGet a borrowed <code>Cow&lt;&#39;_, CursorRef&gt;</code>\nProvides access to the underlying value as a string slice.\nHelix endpoints regarding bits\nHelix endpoints regarding channels\nHelix endpoints regarding charities\nHelix endpoints regarding chat\nClient for Helix endpoints\nHelix endpoints regarding clips\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nTwitch’s response field for <code>data</code>.\nHelix endpoints regarding EventSub\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new Cursor from a static reference\nTransparently reinterprets the static string slice as a …\nTransparently reinterprets the string slice as a …\nHelix endpoints regarding games\nReturns bare URI for the request, NOT including query …\nReturns full URI for the request, including query …\nHelix endpoints regarding creator goals\nHelix endpoints regarding hype trains\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>Cursor</code> into a <code>Box&lt;CursorRef&gt;</code>\nConverts a <code>Box&lt;CursorRef&gt;</code> into a <code>Cursor</code> without copying or …\nMake a paginate-able request into a stream\nHelix endpoints regarding moderation\nConstructs a new Cursor\nFields which are not part of the data response, but are …\nA cursor value, to be used in a subsequent request to …\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse response.\nParse response.\nParse response.\nParse response.\nParse response.\nHelix endpoints regarding channel points/redeems\nThe current number of subscriber points earned by this …\nHelix endpoints regarding channel polls\nHelix endpoints regarding channel predictions\nDefines layout of the url parameters.\nHelix endpoints regarding channel raids\nRequests for driving the API\nThe request that was sent, used for pagination.\nResponses contains the return values of a request.\nHelix endpoints regarding stream schedules\nHelix endpoints regarding search\nShould returns the current pagination cursor.\nHelix endpoints regarding streams\nHelix endpoints regarding subscriptions\nHelix endpoints regarding tags\nUnwraps the underlying <code>String</code> value\nHelix endpoints regarding subscriptions\nResponse would return this many results if fully …\nCreate the body\nHelix endpoints regarding users\nHelix endpoints regarding videos\nHelix endpoints regarding whispers\nBody sent to DELETE response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to PUT response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nReturn Values for Get Bits Leaderboard\nReturn Values for Get Cheermotes\nQuery Parameters for Get Bits Leaderboard\nQuery Parameters for Get Cheermotes\nID for the broadcaster who might own specialized …\nNumber of results to be returned. Maximum: 100. Default: …\nPeriod over which the returned data is aggregated.\nGets a ranked list of Bits leaderboard information for an …\nRetrieves the list of available Cheermotes, animated …\nIndicates whether or not this emote provides a charity …\nThe data when this Cheermote was last updated.\nLeaderboard\nOrder of the emotes as shown in the bits card, in …\nTime period over which data is aggregated (PST time zone). …\nPrefix for cheermote\nTimestamp for the period over which the returned data is …\nAn array of Cheermotes with their metadata.\nTotal number of results (users) returned. This is count or …\nShows whether the emote is <code>global_first_party</code>,  …\nID of the user whose results are returned; i.e., the …\nReturn Values for Get Bits Leaderboard\nPeriod over which the returned data is aggregated.\nQuery Parameters for Get Bits Leaderboard\nInformation about user in leaderboard\nCreate a builder for building <code>GetBitsLeaderboardRequest</code>. …\nNumber of results to be returned. Maximum: 100. Default: …\nNumber of results to be returned. Maximum: 100. Default: …\nPeriod over which the returned data is aggregated.\nEnd of the date range for the returned data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeaderboard\nReturns an new <code>GetBitsLeaderboardRequest</code>\nGet loaderboard for this period. Valid values: <code>&quot;day&quot;</code>, …\nTime period over which data is aggregated (PST time zone). …\nLeaderboard rank of the user.\nLeaderboard score (number of Bits) of the user\nGet leaderboard starting at this timestamp\nTimestamp for the period over which the returned data is …\nStart of the date range for the returned data.\nTotal number of results (users) returned. This is count or …\nGet leaderboard where this user is included (if they are …\nID of the user whose results are returned; i.e., the …\nID of the user (viewer) in the leaderboard entry.\nUser login name.\nDisplay name corresponding to user_id.\nCustom channel cheermote\nReturn Values for Get Cheermotes\nURLs to the same image, animated or static.\nImages in sizes\nImages for different themes\nTypes of cheermotes\nDisplay only\nQuery Parameters for Get Cheermotes\nGlobal cheermote\nGlobal third party cheermote\nLevel of cheermote image\nSponsored cheermote\nInformation about tier of emote\nAnimated GIFs\nGet Cheermotes in a specific broadcasters channel.\nID for the broadcaster who might own specialized …\nCreate a builder for building <code>GetCheermotesRequest</code>. On the …\nIndicates whether or not emote information is accessible …\nHex code for the color associated with the bits of that …\nDark mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the emote tier. Possible tiers are: …\nStructure containing both animated and static image sets, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether or not this emote provides a charity …\nThe data when this Cheermote was last updated.\nLight mode\nMinimum number of bits needed to be used to hit the given …\nGet available Cheermotes.\nOrder of the emotes as shown in the bits card, in …\nPrefix for cheermote\nIndicates whether or not we hide the emote from the bits …\nStatic PNGs\nAn array of Cheermotes with their metadata.\nShows whether the emote is <code>global_first_party</code>,  …\nURL to image in size 42 × 42\nURL to image in size 28 × 28\nURL to image in size 56 × 56\nURL to image in size 84 × 84\nURL to image in size 112 × 112\nReturn Values for Get Ad Schedule\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nReturn Values for Get Channel Information\nList of labels that should be set as the Channel’s CCLs.\nReturn Values for Get Channel Editors\nReturn Values for Get Followed Channels\nReturn Values for Get Channel Followers\nQuery Parameters for Get Ad Schedule\nQuery Parameters for Get Channel Editors\nQuery Parameters for Get Channel Followers\nQuery Parameters for Get Channel Information\nQuery Parameters for Get Followed Channels\nQuery Parameters for Get VIPs\nReturn Values for Modify Channel Information\nBody Parameters for Modify Channel Information\nQuery Parameters for Modify Channel Information\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nQuery Parameters for Snooze Next Ad\nReturn Values for Snooze Next Ad\nReturn Values for Start Commercial\nBody Parameters for Start Commercial\nQuery Parameters for Start Commercial\nSuccessfully added the VIP.\n204 - Channel/Stream updated successfully\nSuccessfully removed the VIP.\nReturn Values for Get VIPs\nAdds a VIP to the broadcaster’s chat room. …\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nThe cursor used to get the next page of results. The …\nThe ID of the broadcaster that’s granting VIP status to …\nBroadcaster’s user ID associated with the channel.\nBroadcaster’s user ID associated with the channel.\nBroadcaster’s user ID associated with the channel.\nID of the channel\nTwitch User ID of this channel owner\nFollowedBroadcaster’s user ID associated with the …\nAn ID that uniquely identifies the broadcaster that this …\nThe ID of the broadcaster whose list of VIPs you want to …\nID of the channel\nThe ID of the broadcaster that’s removing VIP status …\nID of the channel\nID of the channel requesting a commercial\nLanguage of the channel\nLanguage of the channel\nTwitch User login of this channel owner\nThe broadcaster’s login name.\nTwitch user display name of this channel owner\nThe broadcaster’s display name.\nThe CCLs applied to the channel.\nList of labels that should be set as the Channel’s CCLs.\nDate and time the editor was given editor permissions.\nStream delay in seconds\nThe number of seconds you want your broadcast buffered …\nDescription of the stream\nThe length in seconds of the scheduled upcoming ad break.\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nThe maximum number of items to return per page in the …\nThe UTC timestamp when the user started following the …\nThe UTC timestamp when the user started following the …\nCurrent game ID being played on the channel\nCurrent game ID being played on the channel. Use “0” …\nName of the game being played on the channel\nGets ad schedule related information, including snooze, …\nGets a list of users who have editor permissions for a …\nGets a list of users that follow the specified …\nGets channel information for users. <code>get-channel-information</code>\nGets a list of broadcasters that the specified user …\nGets a list of the channel’s VIPs. <code>get-vips</code>\nID of the Content Classification Labels that must be …\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating whether the label should be …\nThe UTC timestamp of the broadcaster’s last ad-break, in …\nDesired length of the commercial in seconds. Valid options …\nLength of the triggered commercial\nProvides contextual information on why the request failed\nModify channel information for users. …\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe amount of pre-roll free time remaining for the channel …\nRemoves a VIP from the broadcaster’s chat room. …\nSeconds until the next commercial can be served on this …\nThe number of snoozes available for the broadcaster.\nThe number of snoozes available for the broadcaster.\nIf available, pushes back the timestamp of the upcoming …\nThe UTC timestamp when the broadcaster will gain an …\nThe UTC timestamp when the broadcaster will gain an …\nStarts a commercial on a specified channel. …\nThe tags applied to the channel.\nA list of channel-defined tags to apply to the channel. To …\nTitle of the stream\nTitle of the stream. Value must not be an empty string.\nThe ID of the user to add as a VIP in the broadcaster’s …\nUser ID of the editor.\nA user’s ID. Use this parameter to see whether the user …\nAn ID that uniquely identifies the user that’s following …\nA user’s ID. Use this parameter to see whether the user …\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nThe ID of the user to remove as a VIP from the …\nThe user’s login name.\nThe user’s login name.\nDisplay name of the editor.\nThe user’s display name.\nThe user’s display name.\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nSuccessfully added the VIP.\nThe ID of the broadcaster that’s granting VIP status to …\nCreate a builder for building <code>AddChannelVipRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a channel VIP\nThe ID of the user to add as a VIP in the broadcaster’s …\nReturn Values for Get Ad Schedule\nQuery Parameters for Get Ad Schedule\nGet specified broadcasters ad schedule information\nBroadcaster’s user ID associated with the channel.\nCreate a builder for building <code>GetAdScheduleRequest</code>. On the …\nThe length in seconds of the scheduled upcoming ad break.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe UTC timestamp of the broadcaster’s last ad-break, in …\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe amount of pre-roll free time remaining for the channel …\nThe number of snoozes available for the broadcaster.\nThe UTC timestamp when the broadcaster will gain an …\nReturn Values for Get Channel Editors\nQuery Parameters for Get Channel Editors\nGet specified broadcasters channel editors\nBroadcaster’s user ID associated with the channel.\nCreate a builder for building <code>GetChannelEditorsRequest</code>. On …\nDate and time the editor was given editor permissions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser ID of the editor.\nDisplay name of the editor.\nReturn Values for Get Channel Followers\nQuery Parameters for Get Channel Followers\nCursor for forward pagination: tells the server where to …\nGet specified broadcasters channel editors\nBroadcaster’s user ID associated with the channel.\nCreate a builder for building <code>GetChannelFollowersRequest</code>. …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nThe UTC timestamp when the user started following the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this user id is following the broadcaster\nA user’s ID. Use this parameter to see whether the user …\nAn ID that uniquely identifies the user that’s following …\nThe user’s login name.\nThe user’s display name.\nReturn Values for Get Channel Information\nQuery Parameters for Get Channel Information\nID of the channel\nTwitch User ID of this channel owner\nGet channel information for specific broadcasters.\nLanguage of the channel\nTwitch User login of this channel owner\nTwitch user display name of this channel owner\nCreate a builder for building <code>GetChannelInformationRequest</code>.\nThe CCLs applied to the channel.\nStream delay in seconds\nDescription of the stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent game ID being played on the channel\nName of the game being played on the channel\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBoolean flag indicating if the channel has branded content.\nThe tags applied to the channel.\nTitle of the stream\nReturn Values for Get Followed Channels\nQuery Parameters for Get Followed Channels\nCursor for forward pagination: tells the server where to …\nCheck if the user is following this broadcaster\nFollowedBroadcaster’s user ID associated with the …\nAn ID that uniquely identifies the broadcaster that this …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>GetFollowedChannels</code>. On the …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nThe UTC timestamp when the user started following the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet specified users followed channels\nA user’s ID. Use this parameter to see whether the user …\nQuery Parameters for Get VIPs\nReturn Values for Get VIPs\nThe cursor used to get the next page of results. The …\nGet channel VIPs in channel\nThe ID of the broadcaster whose list of VIPs you want to …\nCreate a builder for building <code>GetVipsRequest</code>. On the …\nSet amount of results returned per page.\nThe maximum number of items to return per page in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nFilter response with these IDs\nThe user’s login name.\nThe user’s display name.\nList of labels that should be set as the Channel’s CCLs.\nReturn Values for Modify Channel Information\nBody Parameters for Modify Channel Information\nQuery Parameters for Modify Channel Information\n204 - Channel/Stream updated successfully\nModify specified broadcasters channel\nID of the channel\nLanguage of the channel\nLanguage of the channel\nCreate a builder for building …\nCreate a builder for building <code>ModifyChannelInformationBody</code>.\nList of labels that should be set as the Channel’s CCLs.\nList of labels that should be set as the Channel’s CCLs.\nThe number of seconds you want your broadcast buffered …\nThe number of seconds you want your broadcast buffered …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent game ID being played on the channel. Use “0” …\nCurrent game ID being played on the channel. Use “0” …\nID of the Content Classification Labels that must be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating whether the label should be …\nData to set on the stream.\nCreate a new <code>ContentClassificationLabel</code>\nA list of channel-defined tags to apply to the channel. To …\nA list of channel-defined tags to apply to the channel. To …\nTitle of the stream. Value must not be an empty string.\nTitle of the stream. Value must not be an empty string.\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nSuccessfully removed the VIP.\nThe ID of the broadcaster that’s removing VIP status …\nCreate a builder for building <code>RemoveChannelVipRequest</code>. On …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove channel VIP\nThe ID of the user to remove as a VIP from the …\nQuery Parameters for Snooze Next Ad\nReturn Values for Snooze Next Ad\nModify specified broadcasters channel\nID of the channel\nCreate a builder for building <code>SnoozeNextAdRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe number of snoozes available for the broadcaster.\nThe UTC timestamp when the broadcaster will gain an …\nReturn Values for Start Commercial\nBody Parameters for Start Commercial\nQuery Parameters for Start Commercial\nID of the channel requesting a commercial\nCreate a builder for building <code>StartCommercialBody</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDesired length of the commercial in seconds. Valid options …\nLength of the triggered commercial\nProvides contextual information on why the request failed\nCreate a new <code>StartCommercialRequest</code>\nStart a commercial in this broadcasters channel\nSeconds until the next commercial can be served on this …\nReturn Values for Get Charity Campaign\nReturn Values for Get Charity Campaign Donations\nQuery Parameters for Get Charity Campaign Donations\nQuery Parameters for Get Charity Campaign\nThe cursor used to get the next page of results. The …\nAn object that contains the amount of money that the user …\nThe ID of the broadcaster that’s actively running a …\nAn ID that uniquely identifies the broadcaster that’s …\nThe ID of the broadcaster that’s currently running a …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nAn ID that identifies the charity campaign that the …\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity\nThe current amount of donations that the campaign has …\nThe maximum number of items to return per page in the …\nGets information about the charity campaign that a …\nGets the list of donations that users have made to the …\nAn ID that uniquely identifies the charity campaign.\nAn ID that identifies the donation. The ID is unique …\nAn object that contains the amount of money that the …\nAn ID that identifies a user that donated money to the …\nThe user’s login name.\nThe user’s display name.\nReturn Values for Get Charity Campaign\nQuery Parameters for Get Charity Campaign\nGets information about the charity campaign that a …\nThe ID of the broadcaster that’s actively running a …\nAn ID that uniquely identifies the broadcaster that’s …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>GetCharityCampaignRequest</code>. …\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity\nThe current amount of donations that the campaign has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that uniquely identifies the charity campaign.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn object that contains the amount of money that the …\nReturn Values for Get Charity Campaign Donations\nQuery Parameters for Get Charity Campaign Donations\nThe cursor used to get the next page of results. The …\nAn object that contains the amount of money that the user …\nGets information about the charity campaign that a …\nThe ID of the broadcaster that’s currently running a …\nCreate a builder for building …\nAn ID that identifies the charity campaign that the …\nSet amount of results returned per page.\nThe maximum number of items to return per page in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that identifies the donation. The ID is unique …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn ID that identifies a user that donated money to the …\nThe user’s login name.\nThe user’s display name.\nValid colors for announcements\nA set of badges\nThe color blue\nA chat emote\nA chat Badge\nCode for why a message was dropped.\nA drop reason of a sent message.\nChat settings\nReturn Values for Get Chatters\nQuery Parameters for Get Channel Chat Badges\nQuery Parameters for Get Channel Emotes\nQuery Parameters for Get Chat Settings\nQuery Parameters for Get Chatters\nQuery Parameters for Get Channel Emotes\nQuery Parameters for Get Global Chat Badges\nQuery Parameters for Get Channel Emotes\nQuery Parameters for Get Chatters\nA chat emote\nThe color green\nYour message was not sent because it contained too many …\nYou are permanently banned from talking in <code>&lt;channel&gt;</code>.\nYour message was not sent because your account is not in …\nThis channel does not exist or has been suspended.\nYour message was not sent because it is identical to the …\nThis room is in emote-only mode. You can find your …\nThis room is in <code>&lt;duration&gt;</code> followers-only mode. Follow …\nThis room is in <code>&lt;duration1&gt;</code> followers-only mode. You have …\nThis room is in followers-only mode. Follow <code>&lt;channel&gt;</code> to …\nThis room is in unique-chat mode and the message you …\nYour message was not sent because you are sending messages …\nHey! Your message is being checked by mods and has not …\nYour message wasn’t posted due to conflicts with the …\nA verified phone number is required to chat in this …\nThis room is in slow mode and you are sending messages too …\nThis room is in subscribers only mode. To talk, purchase a …\nYou don’t have permission to perform that action.\nYou are timed out for <code>&lt;number&gt;</code> more seconds.\nThis room requires a verified account to chat. Please …\nThe color orange\nThe primary color for the broadcaster\nThe color purple\nQuery Parameters for Send A Shoutout\nReturn Values for Send A Shoutout\nBody Parameters for Send Chat Announcement\nQuery Parameters for Send Chat Announcement\nReturn Values for Send Chat Announcement\nBody Parameters for Send Chat message\nQuery Parameters for Send Chat message\nReturn Values for Send Chat message\nShoutout successful\nSuccessfully sent the announcement.\nSuccessfully updated the user’s chat color.\nAn unknown drop-code.\nBody Parameters for Update Chat Settings\nQuery Parameters for Update Chat Settings\nQuery Parameters for Update Chat Settings\nReturn Values for Update Chat Settings\nReturn Values for Get Chatters\nThe cursor used to get the next page of results. The …\nThe broadcaster whose chat badges are being requested. …\nThe broadcaster whose emotes are being requested.\nThe ID of the broadcaster whose chat settings you want to …\nThe ID of the broadcaster whose list of chatters you want …\nThe ID of the broadcaster that owns the chat room to send …\nThe ID of the broadcaster whose chat room the message will …\nThe ID of the broadcaster whose chat settings you want to …\nThe ID of the broadcaster specified in the request.\nCode for why the message was dropped.\nThe Hex color code that the user uses in chat for their …\nThe color used to highlight the announcement. Possible …\nThe color to use for the user’s name in chat.\nThe reason the message was dropped, if any.\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether chat messages must …\nThe broadcaster whose emotes are being requested. Minimum: …\nID of the emote set the emote belongs to.\nThe type of emote.\nThe maximum number of items to return per page in the …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe length of time, in minutes, that the followers must …\nThe length of time, in minutes, that the followers must …\nThe formats that the emote is available in.\nThe formats that the emote is available in.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the broadcaster that’s sending the Shoutout.\nGets a list of custom chat badges that can be used in chat …\nGets all custom emotes for a specific Twitch channel …\nGets the broadcaster’s chat settings. <code>get-chat-settings</code>\nGets the list of users that are connected to the specified …\nGets all Twitch emotes for one or more specific emote sets.\nGets a list of chat badges that can be used in chat for …\nGets all global emotes. Global emotes are Twitch-specific …\nGets the color used for the user’s name in chat. …\nID of the chat badge version.\nID of the emote.\nID of the emote.\nURL to png of size 28x28\nURL to png of size 56x56\nURL to png of size 112x112\nObject of image URLs for the emote.\nObject of image URLs for the emote.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the message passed all checks and was sent.\nThe announcement to make in the broadcaster’s chat room. …\nThe message to send.\nMessage for why the message was dropped.\nThe message id for the message that was sent.\nRequired only to access the <code>non_moderator_chat_delay</code> or …\nThe ID of the moderator or the specified broadcaster …\nThe ID of the broadcaster or a user that is one of the …\nThe ID of a user who has permission to moderate the …\nThe ID of a user that has permission to moderate the …\nThe ID of the moderator specified in the request for chat …\nName of the emote a viewer types into Twitch chat for the …\nName of the emote a viewer types into Twitch chat for the …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that messages are delayed …\nThe amount of time, in seconds, that messages are delayed …\nThe ID of the chat message being replied to.\nThe sizes that the emote is available in.\nThe sizes that the emote is available in.\nSends a Shoutout to the specified broadcaster. …\nSends an announcement to the broadcaster’s chat room. …\nSends an message in the broadcaster’s chat room. …\nThe ID of the user sending the message. This ID must match …\nID for the chat badge set.\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that users need to wait …\nThe amount of time, in seconds, that users need to wait …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether only users that …\nThe background themes that the emote is available in.\nThe background themes that the emote is available in.\nIf the emote_type is “subscriptions”, this indicates …\nThe ID of the broadcaster that’s receiving the Shoutout.\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nUpdates the broadcaster’s chat settings. …\nUpdates the color used for the user’s name in chat.\nCreate an emote builder for this emote.\nThe ID of a user that’s connected to the broadcaster’s …\nThe ID of the user whose color you want to get.\nThe ID of the user.\nThe ID of the user whose chat color you want to update.\nThe user’s login name.\nThe user’s login name.\nThe user’s display name.\nThe user’s display name.\nContains chat badge objects for the set.\nQuery Parameters for Get Channel Chat Badges\nReturn Values for Get Channel Chat Badges\nGet chat badges for the specified broadcaster.\nThe broadcaster whose chat badges are being requested. …\nCreate a builder for building <code>GetChannelChatBadgesRequest</code>. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nID for the chat badge set.\nContains chat badge objects for the set.\nQuery Parameters for Get Channel Emotes\nReturn Values for Get Channel Emotes\nGet emotes in a specific broadcasters channel.\nThe broadcaster whose emotes are being requested.\nCreate a builder for building <code>GetChannelEmotesRequest</code>. On …\nID of the emote set the emote belongs to.\nThe type of emote.\nThe formats that the emote is available in.\nReturns the argument unchanged.\nID of the emote.\nObject of image URLs for the emote.\nCalls <code>U::from(self)</code>.\nName of the emote a viewer types into Twitch chat for the …\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nIf the emote_type is “subscriptions”, this indicates …\nQuery Parameters for Get Chat Settings\nGet chat settings for broadcasters channel\nThe ID of the broadcaster whose chat settings you want to …\nCreate a builder for building <code>GetChatSettingsRequest</code>. On …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ID of a user that has permission to moderate the …\nRequired only to access the <code>non_moderator_chat_delay</code> or …\nReturn Values for Get Chatters\nQuery Parameters for Get Chatters\nThe cursor used to get the next page of results. The …\nThe ID of the broadcaster whose list of chatters you want …\nCreate a builder for building <code>GetChattersRequest</code>. On the …\nSet amount of results returned per page.\nThe maximum number of items to return per page in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the moderator or the specified broadcaster …\nGet chatters in broadcasters channel\nThe ID of a user that’s connected to the broadcaster’s …\nThe user’s login name.\nThe user’s display name.\nReturn Values for Get Channel Emotes\nQuery Parameters for Get Channel Emotes\nCreate a builder for building <code>GetEmoteSetsRequest</code>. On the …\nThe broadcaster whose emotes are being requested. Minimum: …\nID of the emote set the emote belongs to.\nGet emotes in these sets\nThe type of emote.\nThe formats that the emote is available in.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEmote ID.\nObject of image URLs for the emote.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of the emote a viewer types into Twitch chat for the …\nUser ID of the broadcaster who owns the emote.\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nCreate an emote builder for this emote.\nQuery Parameters for Get Global Chat Badges\nReturn Values for Get Global Chat Badges\nCreate a builder for building <code>GetGlobalChatBadgesRequest</code>. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet global chat badges\nID for the chat badge set.\nContains chat badge objects for the set.\nReturn Values for Get Channel Emotes\nQuery Parameters for Get Channel Emotes\nCreate a builder for building <code>GetGlobalEmotesRequest</code>. On …\nThe formats that the emote is available in.\nReturns the argument unchanged.\nID of the emote.\nObject of image URLs for the emote.\nCalls <code>U::from(self)</code>.\nName of the emote a viewer types into Twitch chat for the …\nGet global emotes\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nQuery Parameters for Get Chatters\nReturn Values for Get Chatters\nCreate a builder for building <code>GetUserChatColorRequest</code>. On …\nThe Hex color code that the user uses in chat for their …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the user whose color you want to get.\nThe ID of the user.\nGet chat colors of specified users\nThe user’s login name.\nThe user’s display name.\nQuery Parameters for Send A Shoutout\nReturn Values for Send A Shoutout\nShoutout successful\nCreate a builder for building <code>SendAShoutoutRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the broadcaster that’s sending the Shoutout.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the broadcaster or a user that is one of the …\nCreate a new <code>SendAShoutoutRequest</code>\nThe ID of the broadcaster that’s receiving the Shoutout.\nBody Parameters for Send Chat Announcement\nQuery Parameters for Send Chat Announcement\nReturn Values for Send Chat Announcement\nSuccessfully sent the announcement.\nThe ID of the broadcaster that owns the chat room to send …\nCreate a builder for building <code>SendChatAnnouncementRequest</code>. …\nCreate a builder for building <code>SendChatAnnouncementBody</code>. On …\nThe color used to highlight the announcement. Possible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe announcement to make in the broadcaster’s chat room. …\nThe ID of a user who has permission to moderate the …\nSend announcement in channel as this moderator\nCreate a new announcement with specified color\nCode for why a message was dropped.\nA drop reason of a sent message.\nYour message was not sent because it contained too many …\nYou are permanently banned from talking in <code>&lt;channel&gt;</code>.\nYour message was not sent because your account is not in …\nThis channel does not exist or has been suspended.\nYour message was not sent because it is identical to the …\nThis room is in emote-only mode. You can find your …\nThis room is in <code>&lt;duration&gt;</code> followers-only mode. Follow …\nThis room is in <code>&lt;duration1&gt;</code> followers-only mode. You have …\nThis room is in followers-only mode. Follow <code>&lt;channel&gt;</code> to …\nThis room is in unique-chat mode and the message you …\nYour message was not sent because you are sending messages …\nHey! Your message is being checked by mods and has not …\nYour message wasn’t posted due to conflicts with the …\nA verified phone number is required to chat in this …\nThis room is in slow mode and you are sending messages too …\nThis room is in subscribers only mode. To talk, purchase a …\nYou don’t have permission to perform that action.\nYou are timed out for <code>&lt;number&gt;</code> more seconds.\nThis room requires a verified account to chat. Please …\nBody Parameters for Send Chat message\nQuery Parameters for Send Chat message\nReturn Values for Send Chat message\nAn unknown drop-code.\nThe ID of the broadcaster whose chat room the message will …\nCreate a builder for building <code>SendChatMessageBody</code>. On the …\nCode for why the message was dropped.\nThe reason the message was dropped, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the message passed all checks and was sent.\nThe message to send.\nMessage for why the message was dropped.\nThe message id for the message that was sent.\nCreate a new <code>SendChatMessageRequest</code>\nSend a message in the broadcaster’s channel\nSet the reply parent message-id\nThe ID of the chat message being replied to.\nThe ID of the user sending the message. This ID must match …\nBody Parameters for Update Chat Settings\nQuery Parameters for Update Chat Settings\nReturn Values for Update Chat Settings\nThe ID of the broadcaster specified in the request.\nThe ID of the broadcaster whose chat settings you want to …\nCreate a builder for building <code>UpdateChatSettingsRequest</code>. …\nCreate a builder for building <code>UpdateChatSettingsBody</code>. On …\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe length of time, in minutes, that the followers must …\nThe length of time, in minutes, that the followers must …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the moderator specified in the request for chat …\nThe ID of a user that has permission to moderate the …\nUpdate the chat settings for the specified broadcaster as …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that messages are delayed …\nThe amount of time, in seconds, that messages are delayed …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that users need to wait …\nThe amount of time, in seconds, that users need to wait …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nSuccessfully updated the user’s chat color.\nQuery Parameters for Update Chat Settings\nReturn Values for Update Chat Settings\nCreate a builder for building <code>UpdateUserChatColorRequest</code>. …\nThe color to use for the user’s name in chat.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the users chat color\nThe ID of the user whose chat color you want to update.\nHttp client error\nError type to combine a http client error with a other …\nClient for Helix or the New Twitch API\nOther error\nRetrieve a clone of the <code>HttpClient</code> inside this <code>HelixClient</code>\nReturns the argument unchanged.\nRetrieve a reference of the <code>HttpClient</code> inside this …\nCalls <code>U::from(self)</code>.\nCreate a new <code>HelixClient</code> with a default <code>HttpClient</code>\nRequest on a valid <code>RequestDelete</code> endpoint\nRequest on a valid <code>RequestGet</code> endpoint\nRequest on a valid <code>RequestPatch</code> endpoint\nRequest on a valid <code>RequestPost</code> endpoint\nRequest on a valid <code>RequestPut</code> endpoint\nCreate a new client with an existing client\nReturn Values for Get Clips\nQuery Parameters for Create Clip\nReturn Value for Create Clip\nQuery Parameters for Get Clips\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nID of the broadcaster for whom clips are returned. The …\nUser ID of the stream from which the clip was created.\nThe ID of the broadcaster whose stream you want to create …\nDisplay name corresponding to broadcaster_id.\nCreate Clip using Broadcaster ID (one only) <code>create-clip</code>\nDate when the clip was created.\nID of the user who created the clip.\nDisplay name corresponding to creator_id.\nDuration of the Clip in seconds (up to 0.1 precision).\nA URL that you can use to edit the clip’s title, …\nURL to embed the clip.\nEnding date/time for returned clips, in RFC3339 format. …\nMaximum number of objects to return. Maximum: 100. …\nID of the game for which clips are returned. The number of …\nID of the game assigned to the stream when the clip was …\nGets clip information by clip ID (one or more), …\nA Boolean value that determines whether the API captures …\nID of the clip being queried. Limit: 100.\nID of the clip being queried.\nID of the created clip.\nDetermines whether the response includes featured clips. …\nIndicates if the clip is featured or not.\nLanguage of the stream from which the clip was created.\nStarting date/time for returned clips, in RFC3339 format. …\nURL of the clip thumbnail.\nTitle of the clip.\nURL where the clip can be viewed.\nID of the video from which the clip was created.\nNumber of times the clip has been viewed.\nThe zero-based offset, in seconds, to where the clip …\nQuery Parameters for Create Clip\nReturn Value for Create Clip\nCreate a new <code>CreateClipRequest</code> with the given …\nThe ID of the broadcaster whose stream you want to create …\nCreate a builder for building <code>CreateClipRequest</code>. On the …\nA URL that you can use to edit the clip’s title, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the has_delay parameter\nA Boolean value that determines whether the API captures …\nID of the created clip.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn Values for Get Clips\nQuery Parameters for Get Clips\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nBroadcaster for whom clips are returned.\nID of the broadcaster for whom clips are returned. The …\nUser ID of the stream from which the clip was created.\nDisplay name corresponding to broadcaster_id.\nCreate a builder for building <code>GetClipsRequest</code>. On the …\nIDs of clips being queried\nDate when the clip was created.\nID of the user who created the clip.\nDisplay name corresponding to creator_id.\nDuration of the Clip in seconds (up to 0.1 precision).\nURL to embed the clip.\nAn empty request\nEnding date/time for the returned clips\nEnding date/time for returned clips, in RFC3339 format. …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGame for which clips are returned.\nID of the game for which clips are returned. The number of …\nID of the game assigned to the stream when the clip was …\nID of the clip being queried. Limit: 100.\nID of the clip being queried.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the response includes featured clips. …\nIndicates if the clip is featured or not.\nLanguage of the stream from which the clip was created.\nEnding date/time for the returned clips\nStarting date/time for returned clips, in RFC3339 format. …\nURL of the clip thumbnail.\nTitle of the clip.\nURL where the clip can be viewed.\nID of the video from which the clip was created.\nNumber of times the clip has been viewed.\nThe zero-based offset, in seconds, to where the clip …\nBody Parameters for Create Conduit\nQuery Parameters for Create Conduit\nReturn Values for Create EventSub Subscription\nBody Parameters for Create EventSub Subscription\nQuery Parameters for Create EventSub Subscription\nReturn Values for Delete EventSub Subscriptions\nQuery Parameters for Delete EventSub Subscriptions\nReturn Values for Get EventSub Subscriptions\nQuery Parameters for Get Conduits\nQuery Parameters for Get EventSub Subscriptions\n204 - Subscription deleted\nBody Parameters for Update Conduit Shards\nQuery Parameters for Update Conduit Shards\nThe structured response for Update Conduit Shards\nCursor for forward pagination\nJSON object specifying custom parameters for the …\nConduit ID.\nHow much the subscription counts against your limit.\nCreates a new conduit for your Client. <code>create-conduit</code>\nCreates an EventSub subscription.\nRFC3339 timestamp indicating when the subscription was …\nDelete an EventSub subscription.\nList of unsuccessful updates.\nMaximum number of objects to return. Maximum: 100. …\nGet the conduits for your Client. <code>get-conduits</code>\nGet a list of your EventSub subscriptions.\nID of the subscription created.\nThe subscription ID for the subscription you want to …\nThe maximum total cost allowed for all of the …\nThe maximum total cost allowed for all of the …\nThe number of shards to create for this conduit.\nList of successful shard updates.\nList of shards to update.\nStatus of the subscription.\nInclude this parameter to filter subscriptions by their …\nSubscription that will be created\nArray containing subscriptions.\nTotal number of subscriptions for the client ID that made …\nTotal number of subscriptions for the client ID that made …\nTotal cost of all the subscriptions for the client ID that …\nTotal cost of all the subscriptions for the client ID that …\nThe notification delivery specific information\nJSON object indicating the notification delivery specific …\nThe category of the subscription that was created.\nFilter subscriptions by subscription type (e.g., …\nUpdates shard(s) for a conduit. <code>update-conduit-shards</code>\nFilter subscriptions by user ID.\nThe version of the subscription type that was created.\nBody Parameters for Create Conduit\nQuery Parameters for Create Conduit\nCreate a builder for building <code>CreateConduitRequest</code>. On the …\nCreate a builder for building <code>CreateConduitBody</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConduit body settings\nThe number of shards to create for this conduit.\nReturn Values for Create EventSub Subscription\nBody Parameters for Create EventSub Subscription\nQuery Parameters for Create EventSub Subscription\nCreate a builder for building …\nCreate a builder for building …\nJSON object specifying custom parameters for the …\nHow much the subscription counts against your limit.\nRFC3339 timestamp indicating when the subscription was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the subscription created.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum total cost allowed for all of the …\nCreate a new eventsub subscription\nCreate a new <code>CreateEventSubSubscriptionBody</code>\nStatus of the subscription.\nSubscription that will be created\nTotal number of subscriptions for the client ID that made …\nTotal cost of all the subscriptions for the client ID that …\nThe notification delivery specific information\nJSON object indicating the notification delivery specific …\nThe category of the subscription that was created.\nThe version of the subscription type that was created.\nReturn Values for Delete EventSub Subscriptions\nQuery Parameters for Delete EventSub Subscriptions\n204 - Subscription deleted\nCreate a builder for building …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDelete this eventsub subscription.\nThe subscription ID for the subscription you want to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery Parameters for Get Conduits\nCreate a builder for building <code>GetConduitsRequest</code>. On the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn Values for Get EventSub Subscriptions\nQuery Parameters for Get EventSub Subscriptions\nCursor for forward pagination\nCreate a builder for building …\nGet eventsub subscriptions by this type\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum total cost allowed for all of the …\nGet eventsub subscriptions by this status\nInclude this parameter to filter subscriptions by their …\nArray containing subscriptions.\nTotal number of subscriptions for the client ID that made …\nTotal cost of all the subscriptions for the client ID that …\nFilter subscriptions by subscription type (e.g., …\nFilter subscriptions by user ID.\nBody Parameters for Update Conduit Shards\nQuery Parameters for Update Conduit Shards\nThe structured response for Update Conduit Shards\nCreate a builder for building <code>UpdateConduitShardsRequest</code>. …\nCreate a builder for building <code>UpdateConduitShardsBody</code>. On …\nConduit ID.\nList of unsuccessful updates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConduit body settings\nList of successful shard updates.\nList of shards to update.\nA game or category as defined by Twitch\nQuery Parameters for Get Games\nQuery Parameters for Get Top Games\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nMaximum number of objects to return. Maximum: 100. …\nGets game information by game ID or name. <code>get-games</code>\nGets games sorted by number of current viewers on Twitch, …\nGame or category ID.\nGame ID. At most 100 id values can be specified.\nThe ID that IGDB uses to identify this game.\nGame name.\nGame name. The name must be an exact match. For instance, …\nReturn Values for Get Games\nQuery Parameters for Get Games\nTemplate URL for the game’s box art.\nCreate a builder for building <code>GetGamesRequest</code>. On the …\nReturns the argument unchanged.\nGame or category ID.\nGame ID. At most 100 id values can be specified.\nGet games with specific exact id match.\nThe ID that IGDB uses to identify this game.\nCalls <code>U::from(self)</code>.\nGame name.\nGame name. The name must be an exact match. For instance, …\nGet games with specific exact name match.\nReturn Values for Get Top Games\nQuery Parameters for Get Top Games\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nCreate a builder for building <code>GetTopGamesRequest</code>. On the …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nGame or category ID.\nThe ID that IGDB uses to identify this game.\nCalls <code>U::from(self)</code>.\nGame name.\nReturn Values for Get Creator Goals\nQuery Parameters for Get Creator Goals\nMust match the User ID in the Bearer token.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe current value.\nCursor for forward pagination: tells the server where to …\nA description of the goal, if specified. The description …\nMaximum number of objects to return. Maximum: 100. …\nGets the broadcaster’s list of active goals. Use this to …\nRetreive a single event by event ID\nAn ID that uniquely identifies this goal.\nThe goal’s target value. For example, if the broadcaster …\nThe type of goal.\nReturn Values for Get Creator Goals\nQuery Parameters for Get Creator Goals\nGets the broadcaster’s list of active goals.\nMust match the User ID in the Bearer token.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nCreate a builder for building <code>GetCreatorGoalsRequest</code>. On …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe current value.\nCursor for forward pagination: tells the server where to …\nA description of the goal, if specified. The description …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetreive a single event by event ID\nAn ID that uniquely identifies this goal.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe goal’s target value. For example, if the broadcaster …\nThe type of goal.\nBits\nA contribution to a hype train\nType of contribution to a hype train\nQuery Parameters for Get Hype Train Events\nCovers other contribution methods not listed.\nChannel Subscriptions. Either gifted or not.\nMust match the User ID in the Bearer token.\nCursor for forward pagination: tells the server where to …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the information of the most recent Hype Train of the …\nRetreive a single event by event ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe total contributed.\nType of contribution. Valid values include bits, …\nThe ID of the user.\nQuery Parameters for Get Hype Train Events\nReturn Values for Get Hype Train Events\nEvent data for\nType of Hype Train event\nProgression\nGet hypetrain evens\nMust match the User ID in the Bearer token.\nThe requested broadcaster ID.\nCreate a builder for building <code>GetHypeTrainEventsRequest</code>. …\nRFC3339 formatted timestamp of when another hype train can …\nCursor for forward pagination: tells the server where to …\nReturns <code>broadcaster_id</code>, <code>broadcaster_name</code>, <code>user_id</code>, …\nRFC3339 formatted timestamp for events.\nDisplays hypetrain.{event_name}, currently only …\nThe time at which the hype train expires. The expiration …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number of points required to reach the next level.\nRetreive a single event by event ID\nEvent ID\nThe distinct ID of this Hype Train\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe most recent contribution.\nCurrent level of hype train event.\nThe timestamp at which the hype train started.\nThe contributors with the most points contributed.\nTotal points contributed to the hype train.\nReturns the version of the endpoint.\nBody Parameters for Add Blocked Term\nQuery Parameters for Add Blocked Term\nQuery Parameters for Add Channel Moderator\nReturn Values for Add Channel Moderator\nAllow the message\nAction to take for a message.\nReturn Values for Ban User\nBody Parameters for Ban User\nQuery Parameters for Ban User\nReturn Values for Get Banned Users\nA blocked term in automod\nReturn Values for Check AutoMod Status\nBody Parameters for Check AutoMod Status\nQuery Parameters for Check AutoMod Status\nQuery Parameters for Delete Chat Messages\nReturn Values for Delete Chat Messages\nDeny the message\nQuery Parameters for Get Banned Users\nQuery Parameters for Get Moderators\nQuery Parameters for Get Shield Mode Status\nInformation about a shield mode\nReturn Values for Manage Held AutoMod Messages\nBody Parameters for Manage Held AutoMod Messages\nQuery Parameters for Manage Held AutoMod Messages\nReturn Values for Get Moderators\nReturn Values for Remove Blocked Terms\nQuery Parameters for Remove Blocked Terms\nQuery Parameters for Remove Channel Moderator\nReturn Values for Remove Channel Moderator\nReturn Values for Get Shield Mode Status\nSuccessfully added the moderator.\nSuccessfully removed the specified messages.\nSuccessfully approved or denied the message\n204 - Term removed successfully.\nSuccessfully removed the moderator.\nUnban was successful\nQuery Parameters for Unban User\nReturn Values for Unban User\nThe action to take for the message. Must be “ALLOW” or …\nAdds a word or phrase to the broadcaster’s list of …\nAdds a moderator to the broadcaster’s moderation room. …\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nBans a user from participating in a broadcaster’s chat …\nCursor for backward pagination: tells the server where to …\nThe ID of the broadcaster that owns the list of blocked …\nThe ID of the broadcaster that owns the chat room.\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was banned from …\nMust match the User ID in the Bearer token.\nThe ID of the broadcaster that owns the chat room to …\nMust match the User ID in the Bearer token.\nMust match the User ID in the Bearer token.\nThe ID of the broadcaster whose Shield Mode activation …\nThe ID of the broadcaster that owns the list of blocked …\nThe ID of the broadcaster that owns the chat room.\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster that owns the list of blocked terms.\nDetermines whether a string message meets the channel’s …\nThe UTC date and time (in RFC3999 format) when the ban was …\nThe UTC date and time (in RFC3339 format) of when the term …\nRemoves a single chat message or all chat messages from …\nDuration of the (optional) timeout in seconds.\nThe UTC date and time (in RFC3339 format) that the timeout …\nRFC3339 formatted timestamp for timeouts; empty string for …\nThe UTC date and time (in RFC3339 format) of when the …\nNumber of values to be returned per page. Limit: 100. …\nNumber of values to be returned per page. Limit: 100. …\nReturns the argument unchanged.\nReturns all banned and timed-out users in a channel. …\nGets the broadcaster’s list of non-private, blocked …\nReturns all moderators in a channel. <code>get-moderators</code>\nGets the broadcaster’s Shield Mode activation status. …\nThe ID of the blocked term you want to delete.\nAn ID that uniquely identifies this blocked term.\nCalls <code>U::from(self)</code>.\nA Boolean value that determines whether Shield Mode is …\nIndicates if this message meets AutoMod requirements.\nThe UTC timestamp (in RFC3339 format) of when Shield Mode …\nInformation about the last activated shield mode\nAllow or deny a message that was held for review by …\nThe ID of the message to remove.\nThe ID of a user that has permission to moderate the …\nThe ID of the user to add as a moderator in the …\nThe ID of a user that has permission to moderate the …\nThe moderator that banned or put the user in the timeout.\nThe ID of a user that has permission to moderate the …\nUser ID of the moderator who initiated the ban.\nThe ID of the broadcaster or a user that is one of the …\nAn ID that identifies the moderator that last activated …\nThe ID of a user that has permission to moderate the …\nThe ID of the user to remove as a moderator from the …\nThe ID of a user that has permission to moderate the …\nThe moderator that blocked the word or phrase from being …\nLogin of the moderator who initiated the ban.\nThe moderator’s login name.\nDisplay name of the moderator who initiated the ban.\nThe moderator’s display name.\nDeveloper-generated identifier for mapping messages to …\nThe msg_id passed in the body of the POST message. Maps …\nID of the message to be allowed or denied. These message …\nMessage text.\nThe reason the user is being banned or put in a timeout. …\nThe reason for the ban if provided by the moderator.\nRemoves the word or phrase that the broadcaster is …\nRemoves a moderator from the broadcaster’s chat room. …\nThe word or phrase to block from being used in the …\nThe blocked word or phrase.\nRemoves the ban or timeout that was placed on the …\nActivates or deactivates the broadcaster’s Shield Mode.\nThe UTC date and time (in RFC3339 format) of when the term …\nThe ID of the user to ban or put in a timeout.\nThe user that was banned or was put in a timeout.\nUser ID of the sender.\nFilters the results and only returns a status object for …\nUser ID of a user who has been banned.\nFilters the results and only returns a status object for …\nUser ID of a moderator in the channel.\nThe moderator who is approving or rejecting the held …\nThe ID of the user to remove the ban or timeout from.\nLogin of a user who has been banned.\nLogin of a moderator in the channel.\nDisplay name of a user who has been banned.\nDisplay name of a moderator in the channel.\nBody Parameters for Add Blocked Term\nQuery Parameters for Add Blocked Term\nReturn Values for Add Blocked Term\nThe broadcaster that owns the list of blocked terms.\nThe ID of the broadcaster that owns the list of blocked …\nCreate a builder for building <code>AddBlockedTermRequest</code>. On …\nCreate a builder for building <code>AddBlockedTermBody</code>. On the …\nThe UTC date and time (in RFC3339 format) of when the term …\nThe UTC date and time (in RFC3339 format) of when the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that uniquely identifies this blocked term.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe moderator that blocked the word or phrase from being …\nThe ID of a user that has permission to moderate the …\nWhere to add blocked term\nCreate a new <code>AddBlockedTermBody</code>\nThe blocked word or phrase.\nThe word or phrase to block from being used in the …\nThe UTC date and time (in RFC3339 format) of when the term …\nQuery Parameters for Add Channel Moderator\nReturn Values for Add Channel Moderator\nSuccessfully added the moderator.\nThe ID of the broadcaster that owns the chat room.\nCreate a builder for building <code>AddChannelModeratorRequest</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the user to add as a moderator in the …\nAdd moderator on channel\nReturn Values for Ban User\nBody Parameters for Ban User\nQuery Parameters for Ban User\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was banned from …\nCreate a builder for building <code>BanUserRequest</code>. On the …\nCreate a builder for building <code>BanUserBody</code>. On the builder, …\nThe UTC date and time (in RFC3999 format) when the ban was …\nDuration of the (optional) timeout in seconds.\nThe UTC date and time (in RFC3339 format) that the timeout …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of a user that has permission to moderate the …\nThe moderator that banned or put the user in the timeout.\nBan a user on this channel\nCreate a new <code>BanUserBody</code>\nThe reason the user is being banned or put in a timeout. …\nThe ID of the user to ban or put in a timeout.\nThe user that was banned or was put in a timeout.\nReturn Values for Check AutoMod Status\nBody Parameters for Check AutoMod Status\nQuery Parameters for Check AutoMod Status\nCheck automod status in this broadcasters channel.\nMust match the User ID in the Bearer token.\nCreate a builder for building <code>CheckAutoModStatusRequest</code>. …\nCreate a builder for building <code>CheckAutoModStatusBody</code>. On …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if this message meets AutoMod requirements.\nDeveloper-generated identifier for mapping messages to …\nThe msg_id passed in the body of the POST message. Maps …\nMessage text.\nCreate a new <code>CheckAutoModStatusBody</code>\nUser ID of the sender.\nQuery Parameters for Delete Chat Messages\nReturn Values for Delete Chat Messages\nSuccessfully removed the specified messages.\nThe ID of the broadcaster that owns the chat room to …\nCreate a builder for building <code>DeleteChatMessagesRequest</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA specific message to remove\nThe ID of the message to remove.\nThe ID of a user that has permission to moderate the …\nRemove chat message(s)\nReturn Values for Get Banned Users\nQuery Parameters for Get Banned Users\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nGet banned users in a broadcasters channel.\nMust match the User ID in the Bearer token.\nCreate a builder for building <code>GetBannedUsersRequest</code>. On …\nRFC3339 formatted timestamp for timeouts; empty string for …\nSet amount of results returned per page.\nNumber of values to be returned per page. Limit: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser ID of the moderator who initiated the ban.\nLogin of the moderator who initiated the ban.\nDisplay name of the moderator who initiated the ban.\nThe reason for the ban if provided by the moderator.\nFilters the results and only returns a status object for …\nUser ID of a user who has been banned.\nLogin of a user who has been banned.\nDisplay name of a user who has been banned.\nCheck if supplied users are banned.\nQuery Parameters for Get Blocked Terms\nReturn Values for Get Blocked Terms\nThe cursor used to get the next page of results. The …\nThe broadcaster that owns the list of blocked terms.\nThe ID of the broadcaster whose blocked terms you’re …\nCreate a builder for building <code>GetBlockedTermsRequest</code>. On …\nThe UTC date and time (in RFC3339 format) of when the term …\nThe UTC date and time (in RFC3339 format) of when the …\nSet amount of results returned per page.\nThe maximum number of blocked terms to return per page in …\nReturns the argument unchanged.\nAn ID that uniquely identifies this blocked term.\nCalls <code>U::from(self)</code>.\nThe moderator that blocked the word or phrase from being …\nThe ID of a user that has permission to moderate the …\nGet blocked terms in a broadcasters channel as specified …\nThe blocked word or phrase.\nThe UTC date and time (in RFC3339 format) of when the term …\nQuery Parameters for Get Moderators\nReturn Values for Get Moderators\nCursor for forward pagination: tells the server where to …\nGet moderators in a broadcasters channel.\nMust match the User ID in the Bearer token.\nCreate a builder for building <code>GetModeratorsRequest</code>. On the …\nSet amount of results returned per page.\nNumber of values to be returned per page. Limit: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilters the results and only returns a status object for …\nUser ID of a moderator in the channel.\nFilter the results for specific users.\nLogin of a moderator in the channel.\nDisplay name of a moderator in the channel.\nQuery Parameters for Get Shield Mode Status\nInformation about a shield mode\nReturn Values for Get Shield Mode Status\nThe ID of the broadcaster whose Shield Mode activation …\nCreate a builder for building <code>GetShieldModeStatusRequest</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA Boolean value that determines whether Shield Mode is …\nThe UTC timestamp (in RFC3339 format) of when Shield Mode …\nInformation about the last activated shield mode\nThe ID of the broadcaster or a user that is one of the …\nAn ID that identifies the moderator that last activated …\nThe moderator’s login name.\nThe moderator’s display name.\nGet shield mode status in a broadcasters channel as …\nAllow the message\nAction to take for a message.\nDeny the message\nReturn Values for Manage Held AutoMod Messages\nBody Parameters for Manage Held AutoMod Messages\nQuery Parameters for Manage Held AutoMod Messages\nSuccessfully approved or denied the message\nThe action to take for the message. Must be “ALLOW” or …\nCreate a builder for building …\nCreate a builder for building <code>ManageHeldAutoModMessagesBody</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nID of the message to be allowed or denied. These message …\nCreate a new <code>ManageHeldAutoModMessagesRequest</code>\nCreate a new <code>ManageHeldAutoModMessagesBody</code>\nThe moderator who is approving or rejecting the held …\nReturn Values for Remove Blocked Terms\nQuery Parameters for Remove Blocked Terms\n204 - Term removed successfully.\nThe ID of the broadcaster that owns the list of blocked …\nCreate a builder for building <code>RemoveBlockedTermRequest</code>. On …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the blocked term you want to delete.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of a user that has permission to moderate the …\nRemove blocked term\nQuery Parameters for Remove Channel Moderator\nReturn Values for Remove Channel Moderator\nSuccessfully removed the moderator.\nThe ID of the broadcaster that owns the chat room.\nCreate a builder for building <code>RemoveChannelModeratorRequest</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the user to remove as a moderator from the …\nRemove moderator\nUnban was successful\nQuery Parameters for Unban User\nReturn Values for Unban User\nThe ID of the broadcaster whose chat room the user is …\nCreate a builder for building <code>UnbanUserRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of a user that has permission to moderate the …\nRemove the ban or timeout that was placed on the specified …\nThe ID of the user to remove the ban or timeout from.\nReturn Values for Get Shield Mode Status\nBody Parameters for Update Shield Mode Status\nQuery Parameters for Update Shield Mode Status\nThe ID of the broadcaster whose Shield Mode you want to …\nCreate a builder for building <code>UpdateShieldModeStatusRequest</code>…\nCreate a builder for building <code>UpdateShieldModeStatusBody</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet status of shield mode\nA Boolean value that determines whether Shield Mode is …\nA Boolean value that determines whether to activate Shield …\nInformation about the last activated shield mode\nThe ID of the broadcaster or a user that is one of the …\nSet the shield mode status on specified channel as the …\nCancelled reward - the reward has been cancelled before …\nBody Parameters for Create Custom Rewards\nQuery Parameters for Create Custom Rewards\nReturn Values for Create Custom Rewards\nReturn Values for Get Custom Reward\nReturn Values for Get Custom Reward Redemption\nCustom reward redemption statuses: UNFULFILLED, FULFILLED …\nReturn Values for Delete CustomReward\nQuery Parameters for Delete CustomReward\nFulfilled reward - the user has claimed it and the reward …\nQuery Parameters for Get Custom Reward Redemption\nQuery Parameters for Get Custom Reward\nReward deleted\n200 - OK\nUnfulfilled reward - the user has claimed it but it is …\nBody Parameters for Update Custom Rewards\nQuery Parameters for Update Custom Rewards\nBody Parameters for Update Redemption Status\nFIXME: Returns an object. Return Values for Update …\nQuery Parameters for Update Redemption Status\nCursor for forward pagination: tells the server where to …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nID of the channel the reward is for\nProvided broadcaster_id must match the user_id in the auth …\nProvided broadcaster_id must match the user_id in the auth …\nProvided broadcaster_id must match the user_id in the auth …\nID of the channel the reward is for\nProvided broadcaster_id must match the user_id in the auth …\nThe id of the broadcaster that the reward belongs to.\nProvided broadcaster_id must match the user_id in the auth …\nProvided broadcaster_id must match the user_id in the auth …\nLogin of the channel the reward is for\nLogin of the channel the reward is for\nBroadcaster’s user login name.\nDisplay name of the channel the reward is for\nDisplay name of the channel the reward is for\nThe display name of the broadcaster that the reward …\nTimestamp of the cooldown expiration. Null if the reward …\nTimestamp of the cooldown expiration. Null if the reward …\nThe cost of the reward\nThe cost of the reward\nThe cost of the reward\nThe cost of the reward\nAdds a specified user to the followers of a specified …\nSet of default images of 1x, 2x and 4x sizes for the …\nSet of default images of 1x, 2x and 4x sizes for the …\nDeletes a Custom Reward on a channel. <code>delete-custom-reward</code>\nNumber of results to be returned when getting the …\nReturns the argument unchanged.\nReturns a list of Custom Reward objects for the Custom …\nReturns Custom Reward Redemption objects for a Custom …\nThe cooldown in seconds if enabled\nThe cooldown in seconds if enabled\nWhether a cooldown is enabled and what the cooldown is. { …\nWhether a cooldown is enabled and what the cooldown is. { …\nID of the reward\nID of the Custom Reward to delete, must match a Custom …\nWhen used, this parameter filters the results and only …\nID of the reward\nA list of IDs to filter the redemptions by.\nThe ID of the redemption.\nID of the Custom Reward to update, must match a Custom …\nID of the Custom Reward Redemption to update, must match a …\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nWhether a cooldown is enabled. Defaults to false.\nWhether a cooldown is enabled. Defaults to false.\nIs the reward currently in stock, if false viewers can’t …\nIs the reward currently in stock, if false viewers can’t …\nWhether a maximum per stream is enabled. Defaults to false.\nWhether a maximum per stream is enabled\nWhether a maximum per user per stream is enabled. Defaults …\nWhether a maximum per user per stream is enabled. Defaults …\nIs the reward currently paused, if true viewers can’t …\nIs the reward currently paused, if true viewers can’t …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nThe maximum number per stream if enabled\nThe maximum number per stream if enabled\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per stream is enabled and what the …\nThe maximum number per user per stream if enabled\nThe maximum number per user per stream if enabled\nWhether a maximum per user per stream is enabled and what …\nWhether a maximum per user per stream is enabled and what …\nWhen set to true, only returns custom rewards that the …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nRFC3339 timestamp of when the reward was redeemed.\nThe number of redemptions redeemed during the current live …\nThe number of redemptions redeemed during the current live …\nBasic information about the Custom Reward that was …\nWhen ID is not provided, this parameter returns paginated …\nID of the Custom Reward the redemptions to be updated are …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nThe order to sort redemptions by.\nWhen id is not provided, this param is required and …\nOne of UNFULFILLED, FULFILLED or CANCELED\nThe new status to set redemptions to. Can be either …\nThe title of the reward\nThe title of the reward\nThe title of the reward\nThe title of the reward\nUpdates a Custom Reward created on a channel.\nUpdates the status of Custom Reward Redemption objects on …\nThe ID of the user that redeemed the reward\nThe user input provided. Empty string if not provided.\nThe login of the user who redeemed the reward.\nThe display name of the user that redeemed the reward.\nBody Parameters for Create Custom Rewards\nQuery Parameters for Create Custom Rewards\nReturn Values for Create Custom Rewards\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nChannel to create reward on\nID of the channel the reward is for\nProvided broadcaster_id must match the user_id in the auth …\nLogin of the channel the reward is for\nDisplay name of the channel the reward is for\nCreate a builder for building <code>CreateCustomRewardRequest</code>. …\nCreate a builder for building <code>CreateCustomRewardBody</code>. On …\nTimestamp of the cooldown expiration. Null if the reward …\nThe cost of the reward\nThe cost of the reward\nSet of default images of 1x, 2x and 4x sizes for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe cooldown in seconds if enabled\nWhether a cooldown is enabled and what the cooldown is. { …\nID of the reward\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nWhether a cooldown is enabled. Defaults to false.\nIs the reward currently in stock, if false viewers can’t …\nWhether a maximum per stream is enabled. Defaults to false.\nWhether a maximum per user per stream is enabled. Defaults …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nThe maximum number per stream if enabled\nWhether a maximum per stream is enabled and what the …\nThe maximum number per user per stream if enabled\nWhether a maximum per user per stream is enabled and what …\nReward to create with title.\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nThe number of redemptions redeemed during the current live …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nThe title of the reward\nThe title of the reward\nReturn Values for Delete CustomReward\nQuery Parameters for Delete CustomReward\nReward deleted\nProvided broadcaster_id must match the user_id in the auth …\nCreate a builder for building <code>DeleteCustomRewardRequest</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the Custom Reward to delete, must match a Custom …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReward to delete\nReturn Values for Get Custom Reward\nQuery Parameters for Get Custom Reward\nCustom background color for the reward. Format: Hex with # …\nRewards on this broadcasters channel\nProvided broadcaster_id must match the user_id in the auth …\nID of the channel the reward is for\nLogin of the channel the reward is for\nDisplay name of the channel the reward is for\nCreate a builder for building <code>GetCustomRewardRequest</code>. On …\nTimestamp of the cooldown expiration. Null if the reward …\nThe cost of the reward\nSet of default images of 1x, 2x and 4x sizes for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether a cooldown is enabled and what the cooldown is. { …\nWhen used, this parameter filters the results and only …\nID of the reward\nGet rewards with these ids\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nIs the reward currently in stock, if false viewers can’t …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per user per stream is enabled and what …\nOnly return rewards that this application/client id can …\nWhen set to true, only returns custom rewards that the …\nThe prompt for the viewer when they are redeeming the …\nThe number of redemptions redeemed during the current live …\nShould redemptions be set to FULFILLED status immediately …\nThe title of the reward\nReturn Values for Get Custom Reward Redemption\nQuery Parameters for Get Custom Reward Redemption\nThe order to sort redemptions by.\nSort by newest\nSort by oldest\nInformation about the reward involved\nCursor for forward pagination: tells the server where to …\nReward to fetch\nProvided broadcaster_id must match the user_id in the auth …\nThe id of the broadcaster that the reward belongs to.\nBroadcaster’s user login name.\nThe display name of the broadcaster that the reward …\nCreate a builder for building …\nThe cost of the reward in channel points.\nNumber of results to be returned when getting the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of IDs to filter the redemptions by.\nThe ID of the redemption.\nThe ID of the custom reward.\nGet redemptions with these ids\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe prompt to the user, if any, for the reward.\nRFC3339 timestamp of when the reward was redeemed.\nBasic information about the Custom Reward that was …\nSpecific reward to query\nWhen ID is not provided, this parameter returns paginated …\nThe order to sort redemptions by.\nThe order to sort redemptions by.\nStatus of rewards to return\nWhen id is not provided, this param is required and …\nOne of UNFULFILLED, FULFILLED or CANCELED\nThe title of the custom reward.\nThe ID of the user that redeemed the reward\nThe user input provided. Empty string if not provided.\nThe login of the user who redeemed the reward.\nThe display name of the user that redeemed the reward.\nReward updated\nReturn Values for Update CustomReward\nBody Parameters for Update Custom Rewards\nQuery Parameters for Update Custom Rewards\nCustom background color for the reward. Format: Hex with # …\nProvided broadcaster_id must match the user_id in the auth …\nCreate a builder for building <code>UpdateCustomRewardRequest</code>. …\nCreate a builder for building <code>UpdateCustomRewardBody</code>. On …\nThe cost of the reward\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe cooldown in seconds if enabled\nID of the Custom Reward to update, must match a Custom …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nWhether a cooldown is enabled. Defaults to false.\nWhether a maximum per stream is enabled\nWhether a maximum per user per stream is enabled. Defaults …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nThe maximum number per stream if enabled\nThe maximum number per user per stream if enabled\nUpdate a Custom Reward created on the broadcaster’s …\nThe prompt for the viewer when they are redeeming the …\nShould redemptions be set to FULFILLED status immediately …\nThe title of the reward\nReturn Values for Get Custom Reward Redemption\n200 - OK\nBody Parameters for Update Redemption Status\nFIXME: Returns an object. Return Values for Update …\nQuery Parameters for Update Redemption Status\nThe id of the broadcaster that the reward belongs to.\nProvided broadcaster_id must match the user_id in the auth …\nBroadcaster’s user login name.\nThe display name of the broadcaster that the reward …\nCreate a builder for building <code>UpdateRedemptionStatusRequest</code>…\nCreate a builder for building <code>UpdateRedemptionStatusBody</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the redemption.\nID of the Custom Reward Redemption to update, must match a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the status of Custom Reward Redemption object on a …\nRFC3339 timestamp of when the reward was redeemed.\nBasic information about the Custom Reward that was …\nID of the Custom Reward the redemptions to be updated are …\nThe new status to set\nOne of UNFULFILLED, FULFILLED or CANCELED\nThe new status to set redemptions to. Can be either …\nThe ID of the user that redeemed the reward\nThe user input provided. Empty string if not provided.\nThe login of the user who redeemed the reward.\nThe display name of the user that redeemed the reward.\nBody Parameters for Create Poll\nQuery Parameters for Create Poll\nBody Parameters for End Poll\nQuery Parameters for End Poll\nQuery Parameters for Get polls\nChoice settings for a poll\nReturn Values for Get polls\nCursor for forward pagination\nThe broadcaster running polls. Provided broadcaster_id …\nThe broadcaster running polls. Provided broadcaster_id …\nThe broadcaster running polls. Provided broadcaster_id …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nNumber of Channel Points required to vote once with …\nNumber of Channel Points required to vote once with …\nIndicates if Channel Points can be used for voting. …\nIndicates if Channel Points can be used for voting.\nArray of the poll choices. Minimum: 2 choices. Maximum: 5 …\nArray of the poll choices.\nCreate a poll for a specific Twitch channel. <code>create-poll</code>\nTotal duration for the poll (in seconds). Minimum: 15. …\nTotal duration for the poll (in seconds).\nEnd a poll that is currently active.\nUTC timestamp for the poll’s end time. Set to null if …\nMaximum number of objects to return. Maximum: 20. Default: …\nGet information about all polls or specific polls for a …\nID of the poll.\nID of a poll. Filters results to one or more specific …\nID of the poll.\nUTC timestamp for the poll’s start time.\nThe poll status to be set.\nPoll status. Valid values are:\nQuestion displayed for the poll. Maximum: 60 characters.\nText displayed for the choice. Maximum: 25 characters.\nQuestion displayed for the poll.\nBody Parameters for Create Poll\nQuery Parameters for Create Poll\nReturn Values for Create Poll\nChoice settings for a poll\nID of the broadcaster.\nThe broadcaster running polls. Provided broadcaster_id …\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>CreatePollRequest</code>. On the …\nCreate a builder for building <code>CreatePollBody</code>. On the …\nCreate a builder for building <code>NewPollChoice</code>. On the …\nChannel points per vote\nNumber of Channel Points required to vote once with …\nNumber of Channel Points required to vote once with …\nSet if Channel Points voting is enabled\nIndicates if Channel Points can be used for voting.\nIndicates if Channel Points can be used for voting. …\nArray of the poll choices.\nArray of the poll choices. Minimum: 2 choices. Maximum: 5 …\nTotal duration for the poll (in seconds).\nTotal duration for the poll (in seconds). Minimum: 15. …\nUTC timestamp for the poll’s end time. Set to null if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the poll.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>CreatePollRequest</code>\nPoll settings\nCreate a new <code>NewPollChoice</code>\nUTC timestamp for the poll’s start time.\nPoll status. Valid values are:\nQuestion displayed for the poll.\nQuestion displayed for the poll. Maximum: 60 characters.\nText displayed for the choice. Maximum: 25 characters.\nPoll is currently in progress.\nPoll is no longer visible on the channel.\nUnauthenticated: Missing/invalid Token\nPoll has reached its ended_at time.\nReturn Values for Update CustomReward\nBody Parameters for End Poll\nQuery Parameters for End Poll\nSomething went wrong determining the state.\nBad Request: Query/Body Parameter missing or invalid\nPoll is no longer visible to any user on Twitch.\nStatus of a poll\nPoll ended successfully.\nPoll has been manually terminated before its ended_at time.\nThe broadcaster running polls. Provided broadcaster_id …\nCreate a builder for building <code>EndPollRequest</code>. On the …\nCreate a builder for building <code>EndPollBody</code>. On the builder, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the poll.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new <code>EndPollRequest</code>\nEnd a poll that is currently active.\nThe poll status to be set.\nPoll is currently in progress.\nPoll is no longer visible on the channel.\nPoll has reached its ended_at time.\nQuery Parameters for Get polls\nSomething went wrong determining the state.\nPoll is no longer visible to any user on Twitch.\nReturn Values for Get polls\nPoll choice\nStatus of a poll\nPoll has been manually terminated before its ended_at time.\nCursor for forward pagination\nNumber of votes received via Bits.\nThe broadcaster running polls.\nThe broadcaster running polls. Provided broadcaster_id …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>GetPollsRequest</code>. On the …\nNumber of Channel Points required to vote once with …\nNumber of votes received via Channel Points.\nIndicates if Channel Points can be used for voting.\nArray of the poll choices.\nTotal duration for the poll (in seconds).\nUTC timestamp for the poll’s end time. Set to null if …\nMaximum number of objects to return. Maximum: 20. Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID for the choice.\nID of a poll. Filters results to one or more specific …\nID of the poll.\nIDs of the polls to query.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUTC timestamp for the poll’s start time.\nPoll status. Valid values are:\nText displayed for the choice.\nQuestion displayed for the poll.\nTotal number of votes received for the choice across all …\nQuery Parameters for Get predictions\nReturn Values for Get predictions\nCursor for forward pagination\nThe broadcaster running Predictions. Provided …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a Channel Points Prediction for a specific Twitch …\nUTC timestamp for the Prediction’s start time.\nEnd a prediction that is currently active.\nUTC timestamp for when the Prediction ended. If the status …\nMaximum number of objects to return. Maximum: 20. Default: …\nGet information about all predictions or specific …\nID of a Prediction. Filters results to one or more …\nID of the Prediction.\nUTC timestamp for when the Prediction was locked. If the …\nArray of possible outcomes for the Prediction.\nTotal duration for the Prediction (in seconds).\nStatus of the Prediction.\nTitle for the Prediction.\nID of the winning outcome. If the status is ACTIVE, this …\nBody Parameters for Create Prediction\nQuery Parameters for Create Prediction\nReturn Values for Create Prediction\nChoice settings for a poll\nID of the broadcaster.\nThe broadcaster running Predictions. Provided …\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>CreatePredictionRequest</code>. On …\nCreate a builder for building <code>CreatePredictionBody</code>. On the …\nCreate a builder for building <code>NewPredictionOutcome</code>. On the …\nUTC timestamp for the Prediction’s start time.\nUTC timestamp for when the Prediction ended. If the status …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the Prediction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUTC timestamp for when the Prediction was locked. If the …\nCreate a new <code>CreatePredictionRequest</code>\nCreate a Channel Points Prediction for a specific Twitch …\nCreate a new <code>NewPredictionOutcome</code>\nArray of possible outcomes for the Prediction.\nArray of outcome objects with titles for the Prediction. …\nTotal duration for the Prediction (in seconds).\nTotal duration for the Prediction (in seconds). Minimum: …\nStatus of the Prediction.\nTitle for the Prediction.\nTitle for the Prediction. Maximum: 45 characters.\nText displayed for the choice. Maximum: 25 characters.\nID of the winning outcome. If the status is ACTIVE, this …\nUnauthenticated: Missing/invalid Token\nReturn Values for Update CustomReward\nBody Parameters for End Prediction\nQuery Parameters for End Prediction\nBad Request: Query/Body Parameter missing or invalid\nPrediction ended successfully.\nThe broadcaster running predictions. Provided …\nCreate a builder for building <code>EndPredictionRequest</code>. On the …\nCreate a builder for building <code>EndPredictionBody</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the prediction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new <code>EndPredictionRequest</code>\nEnd given prediction that is currently active.\nThe Prediction status to be set. Valid values:\nID of the winning outcome for the Prediction\nID of the winning outcome for the Prediction. This …\nThe Prediction is active and viewers can make predictions.\nThe Prediction has been canceled and the Channel Points …\nQuery Parameters for Get predictions\nThe Prediction has been locked and viewers can no longer …\nReturn Values for Get predictions\nOutcome for the Prediction\nA prediction choice ID\nStatus of the Prediction\nA winning outcome has been chosen and the Channel Points …\nCursor for forward pagination\nGet information about predictions for this broadcasters …\nThe broadcaster running Predictions. Provided …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>GetPredictionsRequest</code>. On …\nNumber of Channel Points used for the outcome.\nColor for the outcome. Valid values: BLUE, PINK\nUTC timestamp for the Prediction’s start time.\nUTC timestamp for when the Prediction ended. If the status …\nMaximum number of objects to return. Maximum: 20. Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a newPredictionOutcomeIdfrom a static reference\nID for the outcome.\nID of a Prediction. Filters results to one or more …\nID of the Prediction.\nIDs of a Predictions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>PredictionOutcomeId</code> into a …\nUTC timestamp for when the Prediction was locked. If the …\nConstructs a new PredictionOutcomeId\nArray of possible outcomes for the Prediction.\nTotal duration for the Prediction (in seconds).\nStatus of the Prediction.\nUnwraps the underlying <code>String</code> value\nText displayed for outcome.\nTitle for the Prediction.\nArray of users who were the top predictors. null if none. …\nNumber of unique users that chose the outcome.\nID of the winning outcome. If the status is ACTIVE, this …\nQuery Parameters for Cancel A Raid\nReturn Values for Cancel A Raid\nQuery Parameters for Start A Raid\nReturn Values for Start A Raid\n204 - The pending raid was successfully canceled.\nThe ID of the broadcaster that sent the raiding party.\nCancel a pending raid. <code>cancel-a-raid</code>\nRaid another channel by sending the broadcaster’s …\nQuery Parameters for Cancel A Raid\nReturn Values for Cancel A Raid\n204 - The pending raid was successfully canceled.\nCancel a pending raid on this broadcasters channel\nThe ID of the broadcaster that sent the raiding party.\nCreate a builder for building <code>CancelARaidRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery Parameters for Start A Raid\nReturn Values for Start A Raid\nCreate a builder for building <code>StartARaidRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StartARaidRequest</code>\nBody parameters\nBody parameters\nBody parameters\nOptional scopes needed by this endpoint\nThe path to the endpoint relative to the helix root. eg. …\nA request is a Twitch endpoint, see New Twitch API …\nHelix endpoint DELETEs information\nHelix endpoint GETs information\nHelix endpoint PATCHs information\nHelix endpoint POSTs information\nHelix endpoint PUTs information\nResponse type. twitch’s response will  deserialize to …\nScopes needed for this endpoint\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nErrors that can occur during request processing.\nReturns bare URI for the request, NOT including query …\nReturns full URI for the request, including query …\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse response.\nParse response.\nParse response.\nParse response.\nParse response.\nDefines layout of the url parameters.\nErrors for <code>HelixClient::req_get</code> and similar functions.\nCould not create request\nCould not create request\nCustom error\n{0}\n{0}\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nfield serializer only supports strings, sequences, …\nCould not parse DELETE response\nGot error from DELETE response\nCould not parse GET response\nGot error from GET response\nCould not parse PATCH response\nGot error from PATCH response\nCould not parse POST response\nGot error from POST response\nCould not parse PUT response\nGot error from PUT response\nhttp crate returned an error\nRequest failed from reqwests side\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\nErrors that can happen when creating <code>http::Uri</code> for <code>Request</code>\ncould not assemble URI for request\nNo pagination found\npair serializer only supports strings, integers, floats, …\ncould not serialize request to query\nRequest failed from reqwests side\nErrors from the query serializer\nserialization of body failed\nserializer only supports structs and maps on top-level\nURI could not be parsed\ncould not assemble URI for request\ncould not parse response as utf8 when calling <code>GET {2}</code>\ncould not parse response as utf8 when calling <code>PUT {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>DELETE {2}</code>\nvalue serializer only supports primitive types\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBody sent to DELETE response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to PUT response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nResponse retrieved from endpoint. Data is the type in …\nTwitch’s response field for <code>data</code>.\nGet first result of this response.\nGet the next page in the responses.\nGet a field from the response that is not part of <code>data</code>.\nCreate a new response.\nFields which are not part of the data response, but are …\nA cursor value, to be used in a subsequent request to …\nThe request that was sent, used for pagination.\nResponse would return this many results if fully …\nCreate a new response without pagination, total or other …\nThe category for a scheduled broadcast.\nBody Parameters for Create Channel Stream Schedule Segment\nQuery Parameters for Create Channel Stream Schedule Segment\nReturn Values for Delete Channel Stream Schedule Segment\nQuery Parameters for Delete Channel Stream Schedule Segment\nQuery Parameters for Get Channel Stream Schedule\nScheduled broadcasts for a specific channel given by Get …\nScheduled broadcast for a stream schedule.\n204 - User successfully deleted from list of channel …\nStream schedule settings updated successfully.\nReturn Values for Update Channel Stream Schedule\nQuery Parameters for Update Channel Stream Schedule\nInformation on Vacation Mode\nCursor for forward pagination: tells the server where to …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nUsed with recurring scheduled broadcasts. Specifies the …\nThe category for the scheduled broadcast. Set to null if …\nGame/Category ID for the scheduled broadcast.\nCreate a single scheduled broadcast or a recurring …\nDelete a single scheduled broadcast or a recurring …\nDuration of the scheduled broadcast in minutes from the …\nScheduled end time for the scheduled broadcast in RFC3339 …\nEnd time for vacation specified in RFC3339 format.\nMaximum number of stream segments to return. Maximum: 25. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets all scheduled broadcasts or specific scheduled …\nThe ID of the streaming segment to delete.\nThe ID of the stream segment to return. Maximum: 100.\nThe ID for the scheduled broadcast.\nGame/category ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the scheduled broadcast is recurring weekly.\nIndicates if the scheduled broadcast is recurring weekly.\nIndicates if Vacation Mode is enabled. Set to true to add …\nGame/category name.\nScheduled broadcasts for this stream schedule.\nStart time for the scheduled broadcast specified in …\nA timestamp in RFC3339 format to start returning stream …\nScheduled start time for the scheduled broadcast in …\nStart time for vacation specified in RFC3339 format.\nThe timezone of the application creating the scheduled …\nThe timezone for when the vacation is being scheduled …\nTitle for the scheduled broadcast. Maximum: 140 characters.\nTitle for the scheduled broadcast.\nUpdate the settings for a channel’s stream schedule. …\nUpdate a single scheduled broadcast or a recurring …\nA timezone offset for the requester specified in minutes. …\nIf Vacation Mode is enabled, this includes start and end …\nEnd time for vacation specified in RFC3339 format. …\nStart time for vacation specified in RFC3339 format. …\nBody Parameters for Create Channel Stream Schedule Segment\nQuery Parameters for Create Channel Stream Schedule Segment\nReturn Values for Create Channel Stream Schedule Segment\nCreate a single scheduled broadcast or a recurring …\nUser ID of the broadcaster.\nUser ID of the broadcaster who owns the channel streaming …\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nCreate a builder for building …\nGame/Category ID for the scheduled broadcast.\nDuration of the scheduled broadcast in minutes from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the scheduled broadcast is recurring weekly.\nCreate a single scheduled broadcast or a recurring …\nScheduled broadcasts for this stream schedule.\nStart time for the scheduled broadcast specified in …\nThe timezone of the application creating the scheduled …\nTitle for the scheduled broadcast. Maximum: 140 characters.\nIf Vacation Mode is enabled, this includes start and end …\nReturn Values for Delete Channel Stream Schedule Segment\nQuery Parameters for Delete Channel Stream Schedule Segment\n204 - User successfully deleted from list of channel …\nUser ID of the broadcaster who owns the channel streaming …\nCreate a builder for building …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the streaming segment to delete.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDelete a single scheduled broadcast or a recurring …\nQuery Parameters for Get Channel Stream Schedule\nReturn Values for Get Channel Stream Schedule\nCursor for forward pagination: tells the server where to …\nGet a broadcasters schedule\nUser ID of the broadcaster.\nUser ID of the broadcaster who owns the channel streaming …\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nSet amount of results returned per page.\nMaximum number of stream segments to return. Maximum: 25. …\nReturns the argument unchanged.\nSet the id for the request.\nThe ID of the stream segment to return. Maximum: 100.\nCalls <code>U::from(self)</code>.\nScheduled broadcasts for this stream schedule.\nSet the start_time for the request.\nA timestamp in RFC3339 format to start returning stream …\nSet the utc_offset for the request.\nA timezone offset for the requester specified in minutes. …\nIf Vacation Mode is enabled, this includes start and end …\nStream schedule settings updated successfully.\nReturn Values for Update Channel Stream Schedule\nQuery Parameters for Update Channel Stream Schedule\nUpdate the settings for a channel’s stream schedule.\nUser ID of the broadcaster who owns the channel streaming …\nCreate a builder for building …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if Vacation Mode is enabled. Set to true to add …\nThe timezone for when the vacation is being scheduled …\nEnd time for vacation specified in RFC3339 format. …\nStart time for vacation specified in RFC3339 format. …\nBody Parameters for Update Channel Stream Schedule Segment\nQuery Parameters for Update Channel Stream Schedule Segment\nReturn Values for Update Channel Stream Schedule Segment\nUser ID of the broadcaster.\nUser ID of the broadcaster who owns the channel streaming …\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nCreate a builder for building …\nGame/Category ID for the scheduled broadcast.\nDuration of the scheduled broadcast in minutes from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the streaming segment to update.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicated if the scheduled broadcast is canceled.\nUpdate a single scheduled broadcast or a recurring …\nScheduled broadcasts for this stream schedule.\nStart time for the scheduled broadcast specified in …\nThe timezone of the application creating the scheduled …\nTitle for the scheduled broadcast. Maximum: 140 characters.\nIf Vacation Mode is enabled, this includes start and end …\nA game or category as defined by Twitch\nReturn Values for Search Channels\nQuery Parameters for Search Categories\nQuery Parameters for Search Channels\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nChannel language (Broadcaster Language field from the …\nLogin of the broadcaster.\nDisplay name corresponding to user_id\nNumber of values to be returned per page. Limit: 100. …\nMaximum number of objects to return. Maximum: 100 Default: …\nReturns the argument unchanged.\nID of the game being played on the stream\nName of the game being played on the stream.\nGame or category ID.\nChannel ID\nThe ID that IGDB uses to identify this game.\nCalls <code>U::from(self)</code>.\nLive status\nFilter results for live streams only. Default: false\nGame name.\nURI encoded search query\nURL encoded search query\nReturns a list of games or categories that match the query …\nReturns a list of channels (users who have streamed within …\nUTC timestamp. (live only)\nShows tag IDs that apply to the stream (live only).See …\nThe tags applied to the channel.\nThumbnail URL of the stream. All image URLs have variable …\nchannel title\nReturn Values for Search Categories\nQuery Parameters for Search Categories\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nCreate a builder for building <code>SearchCategoriesRequest</code>. On …\nSet amount of results returned per page.\nNumber of values to be returned per page. Limit: 100. …\nReturns the argument unchanged.\nGame or category ID.\nThe ID that IGDB uses to identify this game.\nCalls <code>U::from(self)</code>.\nGame name.\nSearch categories with the following query.\nURI encoded search query\nReturn Values for Search Channels\nQuery Parameters for Search Channels\nCursor for forward pagination: tells the server where to …\nChannel language (Broadcaster Language field from the …\nLogin of the broadcaster.\nCreate a builder for building <code>SearchChannelsRequest</code>. On …\nDisplay name corresponding to user_id\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100 Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the game being played on the stream\nName of the game being played on the stream.\nChannel ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLive status\nGet live streams only\nFilter results for live streams only. Default: false\nSearch channels with the following query.\nURL encoded search query\nUTC timestamp. (live only)\nShows tag IDs that apply to the stream (live only).See …\nThe tags applied to the channel.\nThumbnail URL of the stream. All image URLs have variable …\nchannel title\nQuery Parameters for Get Followed Streams\nQuery Parameters for Get Stream Tags\nQuery Parameters for Get Streams\nStream is live.\nStream not live\nReturn Values for Replace Stream Tags\nBody Parameters for Replace Stream Tags\nQuery Parameters for Replace Stream Tags\nReturn Values for Get Streams\nGotten from <code>Stream.type_</code>\n204 - Stream Tags replaced successfully\nReturn Values for Get Stream Tags\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nID of the stream whose tags are going to be fetched\nID of the stream for which tags are to be replaced.\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns streams broadcasting a specified game ID. You can …\nID of the game being played on the stream.\nName of the game being played.\nGets information about active streams belonging to …\nGets the list of tags for a specified stream (channel). …\nGets information about active streams. <code>get-streams</code>\nID of the tag.\nStream ID.\nCalls <code>U::from(self)</code>.\ntrue if the tag is auto-generated; otherwise, false . An …\nCheck if the stream is live or not\nIndicates if the broadcaster has specified their channel …\nStream language. You can specify up to 100 languages.\nStream language.\nAll localized descriptions of the tag.\nAll localized names of the tag.\nApplies specified tags to a specified stream, overwriting …\nUTC timestamp.\nShows tag IDs that apply to the stream.\nIDs of tags to be applied to the stream.\nThe tags applied to the stream.\nThumbnail URL of the stream. All image URLs have variable …\nStream title.\nStream type: “live” or “” (in case of error).\nReturns streams broadcast by one or more specified user …\nReturns streams broadcast by one or more specified user …\nID of the user who is streaming.\nReturns streams broadcast by one or more specified user …\nLogin of the user who is streaming.\nDisplay name corresponding to user_id.\nNumber of viewers watching the stream at the time of the …\nQuery Parameters for Get Followed Streams\nReturn Values for Get Followed Streams\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCreate a builder for building <code>GetFollowedStreamsRequest</code>. …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nID of the game being played on the stream.\nName of the game being played.\nStream ID.\nCalls <code>U::from(self)</code>.\nIndicates if the broadcaster has specified their channel …\nStream language.\nUTC timestamp.\nShows tag IDs that apply to the stream.\nThe tags applied to the stream.\nThumbnail URL of the stream. All image URLs have variable …\nStream title.\nStream type: “live” or “” (in case of error).\nGet a users followed streams.\nID of the user who is streaming.\nReturns streams broadcast by one or more specified user …\nLogin of the user who is streaming.\nDisplay name corresponding to user_id.\nNumber of viewers watching the stream at the time of the …\nQuery Parameters for Get Stream Tags\nReturn Values for Get Stream Tags\nID of the stream whose tags are going to be fetched\nID of the stream whose tags are going to be fetched\nCreate a builder for building <code>GetStreamTagsRequest</code>. On the …\nReturns the argument unchanged.\nID of the tag.\nCalls <code>U::from(self)</code>.\ntrue if the tag is auto-generated; otherwise, false . An …\nAll localized descriptions of the tag.\nAll localized names of the tag.\nQuery Parameters for Get Streams\nReturn Values for Get Streams\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCreate a builder for building <code>GetStreamsRequest</code>. On the …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns streams broadcasting a specified game ID. You can …\nID of the game being played on the stream.\nReturn streams with these Ids\nName of the game being played.\nStream ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the broadcaster has specified their channel …\nStream language. You can specify up to 100 languages.\nStream language.\nUTC timestamp.\nShows tag IDs that apply to the stream.\nThe tags applied to the stream.\nThumbnail URL of the stream. All image URLs have variable …\nStream title.\nStream type: “live” or “” (in case of error).\nReturns streams broadcast by one or more specified user …\nID of the user who is streaming.\nReturn streams for specified user ids\nReturns streams broadcast by one or more specified user …")